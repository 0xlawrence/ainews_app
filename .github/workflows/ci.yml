name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.11", "3.12"]

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        # Install current package in development mode for proper imports
        pip install -e .
    
    - name: Run linting with ruff
      run: |
        pip install ruff
        ruff check src/ tests/ --ignore=E722,F821,B904,B005
      continue-on-error: true  # Allow linting errors for now
    
    - name: Run formatting check with black
      run: |
        pip install black
        black --check src/ tests/
      continue-on-error: true  # Allow formatting errors for now
    
    - name: Run type checking with mypy
      run: |
        pip install mypy
        mypy src/ --ignore-missing-imports
      continue-on-error: true  # Allow type errors for now during refactoring
    
    - name: Run basic tests only
      run: |
        # Run only dependency-free tests for CI
        echo "ðŸ§ª Running basic schema and structure tests..."
        python3 tests/test_basic_no_deps.py
        echo "âœ… Basic tests completed"
      env:
        # Use mock API keys for testing
        OPENAI_API_KEY: "test-key"
        GEMINI_API_KEY: "test-key"
        CLAUDE_API_KEY: "test-key"
        SUPABASE_URL: "https://test.supabase.co"
        SUPABASE_KEY: "test-key"
    
    - name: Run PRD compliance tests
      run: |
        # Run basic PRD compliance checks without full newsletter generation
        python tests/test_prd_compliance.py
      continue-on-error: true  # Allow to pass during development
    
    - name: Test CLI interface
      run: |
        echo "Testing CLI help command..."
        python main.py --help
        echo "CLI test completed!"
      continue-on-error: true  # Allow CLI test to fail during development

  newsletter-generation:
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        # Install current package in development mode for proper imports
        pip install -e .
        playwright install chromium
    
    - name: Generate daily newsletter
      run: |
        python main.py --max-items 30 --edition daily --output-dir drafts/
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        CLAUDE_API_KEY: ${{ secrets.CLAUDE_API_KEY }}
        SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
        SUPABASE_KEY: ${{ secrets.SUPABASE_KEY }}
        LANGSMITH_API_KEY: ${{ secrets.LANGSMITH_API_KEY }}
    
    - name: Commit and push newsletter
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add drafts/
        git commit -m "ðŸ¤– Daily newsletter generated $(date)" || exit 0
        git push